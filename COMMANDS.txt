REGOLANCER

# view csv files in a nice table
echo -e "Date/Time\t\tFrom Channel\t\tTo Channel\t\tAmount\t      Fees   Rate" && echo -e "$(printf '%.0s-' {1..100})" && tail -n +2 ~/regolancer/rebalances_instance1.csv | sort -t',' -k1,1n | while IFS=',' read timestamp from_scid to_scid amount_msat fees_msat; do readable_time=$(date -d "@$timestamp" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "$timestamp"); amount_sats=$((amount_msat / 1000)); fees_sats=$((fees_msat / 1000)); fee_rate_ppm=$((fees_msat * 1000000 / amount_msat)); from_alias=$(lncli getchaninfo "$from_scid" 2>/dev/null | jq -r --arg pubkey "$(lncli getinfo | jq -r .identity_pubkey)" 'if .node1_pub == $pubkey then .node2_pub else .node1_pub end' 2>/dev/null | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' 2>/dev/null | sed 's/[^a-zA-Z0-9._-]//g'); to_alias=$(lncli getchaninfo "$to_scid" 2>/dev/null | jq -r --arg pubkey "$(lncli getinfo | jq -r .identity_pubkey)" 'if .node1_pub == $pubkey then .node2_pub else .node1_pub end' 2>/dev/null | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' 2>/dev/null | sed 's/[^a-zA-Z0-9._-]//g'); printf "%-19s\t%-15s\t\t%-15s\t\t%9s   %6s %6s\n" "$readable_time" "${from_alias:0:15}" "${to_alias:0:15}" "$(printf "%'d" $amount_sats)" "$fees_sats" "$fee_rate_ppm"; done


FULL RUN

/home/admin/autofee/run_autofee.sh >> /home/admin/autofee/cron.log 2>&1


PIVOT WRAPPER

tail -n 50 ~/autofee/autofee_pivot_wrapper.log


MAX HTLC

tail -50 ~/autofee/autofee_maxhtlc_wrapper.log

# see log for last run with alias
echo -e "Alias\t\t\t\tLast Action" && echo -e "$(printf '%.0s-' {1..100})" && tail -n 100 ~/autofee/autofee_maxhtlc_wrapper.log | grep "Channel [a-f0-9]\{64\}:" | tail -n 50 | while read line; do chan_id=$(echo "$line" | grep -o 'Channel [a-f0-9]\{64\}:' | grep -o '[a-f0-9]\{64\}'); if [ -n "$chan_id" ]; then scid=$(lncli listchannels 2>/dev/null | jq -r --arg cid "$chan_id" '.channels[] | select(.chan_id == $cid) | .scid'); alias=$(lncli listchannels 2>/dev/null | jq -r --arg cid "$chan_id" '.channels[] | select(.chan_id == $cid) | .remote_pubkey' | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' | sed 's/[^a-zA-Z0-9._-]//g'); message=$(echo "$line" | sed 's/^[0-9-]* [0-9:,]* INFO: //' | sed "s/Channel $chan_id:/Channel $scid:/"); printf "%-25s\t%s\n" "${alias:0:25}" "$message"; fi; done | sort -u -k1,1



STAGNANT

# see logs for last run with alias with liq ratio
echo -e "Alias\t\t\t\tLiq Ratio\tLast Action" && echo -e "$(printf '%.0s-' {1..120})" && tail -n 100 ~/autofee/autofee_stagnant_wrapper.log | grep "Channel [a-f0-9]\{64\}:" | tail -n 50 | while read line; do chan_id=$(echo "$line" | grep -o 'Channel [a-f0-9]\{64\}:' | grep -o '[a-f0-9]\{64\}'); if [ -n "$chan_id" ]; then scid=$(lncli listchannels 2>/dev/null | jq -r --arg cid "$chan_id" '.channels[] | select(.chan_id == $cid) | .scid'); alias=$(lncli listchannels 2>/dev/null | jq -r --arg cid "$chan_id" '.channels[] | select(.chan_id == $cid) | .remote_pubkey' | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' | sed 's/[^a-zA-Z0-9._-]//g'); chan_info=$(lncli listchannels 2>/dev/null | jq -r --arg cid "$chan_id" '.channels[] | select(.chan_id == $cid) | "\(.local_balance) \(.capacity)"'); local_balance=$(echo "$chan_info" | cut -d' ' -f1); capacity=$(echo "$chan_info" | cut -d' ' -f2); ratio=$(echo "scale=1; $local_balance * 100 / $capacity" | bc 2>/dev/null || echo "0.0"); message=$(echo "$line" | sed 's/^[0-9-]* [0-9:,]* INFO: //' | sed "s/Channel $chan_id:/Channel $scid:/"); printf "%-25s\t%s%%\t\t%s\n" "${alias:0:25}" "$ratio" "$message"; fi; done | sort -u -k1,1

# see the state file info with alias 
echo -e "SCID\t\t\tAlias\t\t\t\tStagnant\tLast Ratio\tLast Change" && echo -e "$(printf '%.0s-' {1..120})" && cat ~/autofee/stagnant_state.json | jq -r 'to_entries[] | "\(.key) \(.value.is_stagnant) \(.value.last_ratio) \(.value.last_change)"' | while read scid is_stagnant last_ratio last_change; do alias=$(lncli getchaninfo "$scid" 2>/dev/null | jq -r --arg pubkey "$(lncli getinfo | jq -r .identity_pubkey)" 'if .node1_pub == $pubkey then .node2_pub else .node1_pub end' 2>/dev/null | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' 2>/dev/null | sed 's/[^a-zA-Z0-9._-]//g') || continue; [ -n "$alias" ] && printf "%-15s\t%-25s\t%s\t\t%.2f%%\t\t%s\n" "$scid" "${alias:0:25}" "$is_stagnant" "$(echo "$last_ratio * 100" | bc -l)" "$(echo "$last_change" | sed 's/T/ /' | cut -d'.' -f1)"; done

~/autofee/autofee_stagnant_wrapper.py
tail -50 ~/autofee/autofee_stagnant_wrapper.log

# See the full list
cat ~/autofee/stagnant_state.json | jq '.'

# See only stagnant channels:
cat ~/autofee/stagnant_state.json | jq 'to_entries[] | select(.value.is_stagnant == true) | {scid: .key, details: .value}'

INBOUND


~/autofee/autofee_neginb_wrapper.py
tail -n 50 ~/autofee/autofee_neginb_wrapper.log
cat ~/autofee/dynamic_charge.ini

# see log entries for the last run nicely organised with alias and liq ratio
echo -e "Alias\t\t\t\tLiq Ratio\tLast Action" && echo -e "$(printf '%.0s-' {1..120})" && tail -n 100 ~/autofee/autofee_neginb_wrapper.log | grep "Channel" | tail -n 50 | while read line; do scid=$(echo "$line" | grep -o '[0-9]\{15,20\}' | head -1); if [ -n "$scid" ]; then alias=$(lncli getchaninfo "$scid" 2>/dev/null | jq -r --arg pubkey "$(lncli getinfo | jq -r .identity_pubkey)" 'if .node1_pub == $pubkey then .node2_pub else .node1_pub end' 2>/dev/null | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' 2>/dev/null | sed 's/[^a-zA-Z0-9._-]//g'); chan_info=$(lncli listchannels 2>/dev/null | jq -r --arg scid "$scid" '.channels[] | select(.scid == $scid) | "\(.local_balance) \(.capacity)"'); local_balance=$(echo "$chan_info" | cut -d' ' -f1); capacity=$(echo "$chan_info" | cut -d' ' -f2); ratio=$(echo "scale=1; $local_balance * 100 / $capacity" | bc 2>/dev/null || echo "0.0"); message=$(echo "$line" | sed 's/^[0-9-]* [0-9:,]* INFO: //'); printf "%-25s\t%s%%\t\t%s\n" "${alias:0:25}" "$ratio" "$message"; fi; done | sort -u -k1,1

# see all channels and their inbound fees with alias
echo -e "SCID\t\t\tAlias\t\t\t\tInbound Fee (ppm)" && echo -e "$(printf '%.0s-' {1..70})" && cat ~/autofee/neginb_fees.json | jq -r 'to_entries[] | "\(.key) \(.value.inbound_fee)"' | while read scid fee; do alias=$(lncli getchaninfo "$scid" 2>/dev/null | jq -r --arg pubkey "$(lncli getinfo | jq -r .identity_pubkey)" 'if .node1_pub == $pubkey then .node2_pub else .node1_pub end' 2>/dev/null | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' 2>/dev/null | sed 's/[^a-zA-Z0-9._-]//g') || continue; [ -n "$alias" ] && printf "%-15s\t%-25s\t%s\n" "$scid" "${alias:0:25}" "$fee"; done

# Check State File
cat ~/autofee/neginb_fees.json | jq '.'

# Check state for an individual channel
cat ~/autofee/neginb_fees.json | jq '."<scid>"'

# View All Fee Changes for a Specific Channel
grep "Channel <scid>" ~/autofee/autofee_neginb_wrapper.log

# Chack channel state in dynamic_charge.ini
cat ~/autofee/dynamic_charge.ini | grep -A5 '<scid>'

OUTBOUND


~/autofee/autofee_wrapper.py
cat ~/autofee/dynamic_charge.ini
tail -n 40 ~/autofee/autofee_wrapper.log
cat avg_fees.json | jq '.'

# show log entries for all channels in last run with alias and liq ratio
echo -e "Alias\t\t\t\tLiq Ratio\tLast Action" && echo -e "$(printf '%.0s-' {1..120})" && tail -n 100 ~/autofee/autofee_wrapper.log | grep "Channel [a-f0-9]\{64\}:" | tail -n 50 | while read line; do chan_id=$(echo "$line" | grep -o 'Channel [a-f0-9]\{64\}:' | grep -o '[a-f0-9]\{64\}'); if [ -n "$chan_id" ]; then scid=$(lncli listchannels 2>/dev/null | jq -r --arg cid "$chan_id" '.channels[] | select(.chan_id == $cid) | .scid'); alias=$(lncli listchannels 2>/dev/null | jq -r --arg cid "$chan_id" '.channels[] | select(.chan_id == $cid) | .remote_pubkey' | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' | sed 's/[^a-zA-Z0-9._-]//g'); chan_info=$(lncli listchannels 2>/dev/null | jq -r --arg cid "$chan_id" '.channels[] | select(.chan_id == $cid) | "\(.local_balance) \(.capacity)"'); local_balance=$(echo "$chan_info" | cut -d' ' -f1); capacity=$(echo "$chan_info" | cut -d' ' -f2); ratio=$(echo "scale=1; $local_balance * 100 / $capacity" | bc 2>/dev/null || echo "0.0"); message=$(echo "$line" | sed 's/^[0-9-]* [0-9:,]* INFO: //' | sed "s/Channel $chan_id:/Channel $scid:/"); printf "%-25s\t%s%%\t\t%s\n" "${alias:0:25}" "$ratio" "$message"; fi; done | sort -u -k1,1

# show all avg fees and forwards with channel alias for reference (show_avgfee.sh)
echo -e "SCID\t\t\tAlias\t\t\t\tAvg Fee (ppm)\tForwards" && echo -e "$(printf '%.0s-' {1..80})" && cat ~/autofee/avg_fees.json | jq -r 'to_entries[] | "\(.key) \(.value)"' | while read scid fee; do alias=$(lncli getchaninfo "$scid" 2>/dev/null | jq -r --arg pubkey "$(lncli getinfo | jq -r .identity_pubkey)" 'if .node1_pub == $pubkey then .node2_pub else .node1_pub end' 2>/dev/null | xargs -I {} lncli getnodeinfo {} 2>/dev/null | jq -r '.node.alias // "Unknown"' 2>/dev/null | sed 's/[^a-zA-Z0-9._-]//g') || continue; forwards=$(sqlite3 ~/autofee/fee_history.db "SELECT count(*) FROM fee_history WHERE chan_id='$scid';" 2>/dev/null || echo "0"); [ -n "$alias" ] && printf "%-15s\t%-25s\t%s\t\t%s\n" "$scid" "${alias:0:25}" "$fee" "$forwards"; done

# view the last 10 forwards for a specific channel
sqlite3 ~/autofee/fee_history.db "SELECT * FROM fee_history WHERE chan_id='<scid>' LIMIT 10;"

# timestamp for last event
sqlite3 ~/autofee/fee_history.db "SELECT * FROM config;"

# total count of events processed
sqlite3 ~/autofee/fee_history.db "SELECT count(*) FROM fee_history;"

# shows how many forwards per channel
sqlite3 ~/autofee/fee_history.db "SELECT chan_id, count(*) FROM fee_history GROUP BY chan_id;"

# data for individual channels
sqlite3 ~/autofee/fee_history.db "SELECT count(*) FROM fee_history WHERE chan_id = '<scid>';"

# Check Avg Fees for individual channel
cat ~/autofee/avg_fees.json | jq '."<scid>"'

# Chack channel state in dynamic_charge.ini
cat ~/autofee/dynamic_charge.ini | grep -A5 '<scid>'



FIND chan_id with alias
lncli listchannels | jq '.channels[] | select(.peer_alias == "Boltz") | {chan_id, channel_point, peer_alias, scid}'

Find chan_id channel_point and peer_alias using the scid
lncli listchannels | jq '.channels[] | select(.scid == "<scid>") | {chan_id, channel_point, peer_alias, scid}'

Find channel info using chan_id
lncli listchannels | jq '.channels[] | select(.chan_id == "<chan_id>") | {chan_id, peer_alias, capacity, active}'





BAKE MACAROON

lncli bakemacaroon offchain:read offchain:write onchain:read info:read uri:/lnrpc.Lightning/ForwardingHistory --save_to=~/autofee/charge-lnd.macaroon

admin macaroon:
/home/lnd/.lnd/data/chain/bitcoin/mainnet/admin.macaroon


